package com.yw.platform.yhtext;

import android.Manifest;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.alibaba.fastjson.JSON;
import com.yw.platform.R;
import com.yw.platform.global.AppUser;
import com.yw.platform.global.MyApplication;
import com.yw.platform.model.AppInfo;
import com.yw.platform.tools.DeviceInfo;
import com.yw.platform.tools.SetInfo;
import com.yw.platform.yhtext.beans.MessageEvent;
import com.yw.platform.yhtext.beans.accept_bean.AcceptLoginBean;
import com.yw.platform.yhtext.beans.accept_bean.AcceptQueryAppBean;
import com.yw.platform.yhtext.beans.accept_bean.AcceptQueryDocumentListBean;
import com.yw.platform.yhtext.beans.accept_bean.AcceptQueryNoticBean;
import com.yw.platform.yhtext.beans.accept_bean.AcceptQueryPolicyBean;
import com.yw.platform.yhtext.beans.accept_bean.AcceptQueryUserInfoBean;
import com.yw.platform.yhtext.beans.accept_bean.AcceptUploadDeviceInfBean;
import com.yw.platform.yhtext.beans.commonbeans.AppInstalInfoBean;
import com.yw.platform.yhtext.beans.commonbeans.DeviceInfoBean;
import com.yw.platform.yhtext.beans.send_bean.SendLoginBean;
import com.yw.platform.yhtext.beans.send_bean.SendQueryAppBean;
import com.yw.platform.yhtext.beans.send_bean.SendQueryDocumentListBean;
import com.yw.platform.yhtext.beans.send_bean.SendQueryNoticBean;
import com.yw.platform.yhtext.beans.send_bean.SendQueryPolicyBean;
import com.yw.platform.yhtext.beans.send_bean.SendQueryUserInfoBean;
import com.yw.platform.yhtext.beans.send_bean.SendUploadDeviceInfoBean;
import com.yw.platform.yhtext.beans.send_bean.base.BaseSendMsgBean;
import com.yw.platform.yhtext.beans.send_bean.base.BaseUserBean;
import com.yw.platform.yhtext.netty.client.Const;
import com.yw.platform.yhtext.utils.HelloActivity;
import com.yw.platform.yhtext.utils.MD5Util;
import com.yw.platform.yhtext.utils.PhoneMessage;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.ArrayList;
import java.util.List;

import lzhs.com.library.Utils;
import lzhs.com.library.wedgit.permission.PermissionHelper;
import lzhs.com.library.wedgit.permission.PermissionUtils;


public class TextActivity extends AppCompatActivity implements View.OnClickListener {
    public static final String TAG = "MainActivity";
    int Singlestrength;

    TextView mTextShow;
    Button mBtnLogin, mBtnUploadDeviceInfo,
            mBtnQueryApp, mBtnQueryPolicy, mBtnQueryUserInfo,
            mBtnQueryNotice, mBtnPretend, mBtnDocumentList;
    String account = "test", password = "123456";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_text);
        EventBus.getDefault().register(this);
        Utils.init(this);
        //initView();
//        initpermission();//单个动态请求
      // initpermissions();//多个动态请求
    }

    private void initpermissions() {
        String[] permissions = {
                Manifest.permission_group.CAMERA,
                Manifest.permission_group.CONTACTS,
                Manifest.permission_group.LOCATION
                , Manifest.permission_group.PHONE
        };
        PermissionUtils.permission(permissions)
                .rationale(new PermissionUtils.OnRationaleListener() {
                    @Override
                    public void rationale(ShouldRequest shouldRequest) {
                        // 处理 设置拒绝权限后再次请求的回调接口
                    }
                })
                .callback(new PermissionUtils.FullCallback() {
                    @Override
                    public void onGranted(List<String> permissionsGranted) {
                        //处理 请求成功逻辑
                    }

                    @Override
                    public void onDenied(List<String> permissionsDeniedForever, List<String> permissionsDenied) {
                        //处理 请求失败逻辑
                    }
                })
                .request();


    }

    private void initpermission() {
        PermissionHelper.requestCamera(new PermissionHelper.OnPermissionGrantedListener() {
            @Override
            public void onPermissionGranted() {

            }
        });


    }

    private void initView() {
        mTextShow = (TextView) findViewById(R.id.mTextShow);
        mBtnLogin = (Button) findViewById(R.id.mBtnLogin);
        mBtnLogin.setOnClickListener(this);
        mBtnUploadDeviceInfo = (Button) findViewById(R.id.mBtnUploadDeviceInfo);
        mBtnUploadDeviceInfo.setOnClickListener(this);
        mBtnQueryApp = (Button) findViewById(R.id.mBtnQueryApp);
        mBtnQueryApp.setOnClickListener(this);
        mBtnQueryPolicy = (Button) findViewById(R.id.mBtnQueryPolicy);
        mBtnQueryPolicy.setOnClickListener(this);
        mBtnQueryUserInfo = (Button) findViewById(R.id.mBtnQueryUserInfo);
        mBtnQueryUserInfo.setOnClickListener(this);
        mBtnQueryNotice = (Button) findViewById(R.id.mBtnQueryNotice);
        mBtnQueryNotice.setOnClickListener(this);
        mBtnPretend = (Button) findViewById(R.id.mBtnPretend);
        mBtnPretend.setOnClickListener(this);
        mBtnDocumentList = (Button) findViewById(R.id.mBtnDocumentList);
        mBtnDocumentList.setOnClickListener(this);
    }

    @Override
    public void onClick(View view) {
        String data = "";
        switch (view.getId()) {
            case R.id.mBtnLogin:
                data = createLogingBean();
                break;
            case R.id.mBtnUploadDeviceInfo:
                data = createUploadDeviceInfoMessage();
                break;
            case R.id.mBtnQueryApp:
                data = createQueryApp();
                break;
            case R.id.mBtnQueryPolicy:
                data = createQueryPolicy();
                break;
            case R.id.mBtnQueryUserInfo:
                data = createQueryUserInfo();
                break;
            case R.id.mBtnQueryNotice:
                data = createQueryNotice();
                break;
            case R.id.mBtnPretend:
                //initAppList();
                Intent intent=new Intent(this, HelloActivity.class);
                startActivity(intent);
                break;
            case R.id.mBtnDocumentList:
                creatwQueryDocumentList();
                break;

        }
        sendMessage(data);
    }



    /**
     * 获取文档列表接口：method=”queryDocumentList”
     */
    private String creatwQueryDocumentList() {
        BaseSendMsgBean sendMsgBean = createDefaultSendBean();
        SendQueryDocumentListBean sendQueryDocumentListBean = new SendQueryDocumentListBean();
        sendQueryDocumentListBean.setNotification("REQUEST");
        sendQueryDocumentListBean.setUserCode("test002"+"");//当前登录账号getUserCode()

        sendMsgBean.setContent(sendQueryDocumentListBean);

        sendMsgBean.setMethod(Const.METHER_QUERYDOCUMENTLIST);
        sendMsgBean.setRequestId(Const.METHER_QUERYDOCUMENTLIST + "");
        return JSON.toJSONString(sendMsgBean);
    }

    /**
     * 获取通知接口:  method=” queryNotice”
     */
    private String createQueryNotice() {
        BaseSendMsgBean sendMsgBean = createDefaultSendBean();
        SendQueryNoticBean sendQueryNoticBean = new SendQueryNoticBean();
        sendQueryNoticBean.setNotification("REQUEST");
        sendQueryNoticBean.setNoticeType("");//通知类型
        sendQueryNoticBean.setNoticeId("");//通知ID
        sendQueryNoticBean.setUserCode("test");//当前登录账号
        sendMsgBean.setContent(sendQueryNoticBean);

        sendMsgBean.setMethod(Const.METHER_QUERYNOTIC);
        sendMsgBean.setRequestId(Const.METHER_QUERYNOTIC + "");
        return JSON.toJSONString(sendMsgBean);
    }

    /**
     * 获取用户信息接口：method=”queryUserInfo”
     */
    private String createQueryUserInfo() {
        BaseSendMsgBean sendMsgBean = createDefaultSendBean();
        SendQueryUserInfoBean sendQueryUserInfoBean = new SendQueryUserInfoBean();
        sendQueryUserInfoBean.setNotification("REQUEST");
        sendQueryUserInfoBean.setUserCode("test");//当前登录账号
        sendMsgBean.setContent(sendQueryUserInfoBean);
        sendMsgBean.setMethod(Const.METHER_QUERYUSERINFO);
        sendMsgBean.setRequestId(Const.METHER_QUERYUSERINFO + "");
        return JSON.toJSONString(sendMsgBean);
    }

    /**
     * 获取策略接口：method=”queryPolicy”
     */
    private String createQueryPolicy() {
        BaseSendMsgBean sendMsgBean = createDefaultSendBean();

        SendQueryPolicyBean sendQueryPolicyBean = new SendQueryPolicyBean();
        sendQueryPolicyBean.setNotification("REQUEST");
        sendQueryPolicyBean.setUserCode("test");//当前登录账号
        sendMsgBean.setContent(sendQueryPolicyBean);

        sendMsgBean.setMethod(Const.METHER_QUERYPOLICY);
        sendMsgBean.setRequestId(Const.METHER_QUERYPOLICY + "");
        return JSON.toJSONString(sendMsgBean);
    }

    /**
     * 获取应用接口：method=”queryApp”
     */
    private String createQueryApp() {
        BaseSendMsgBean sendMsgBean = createDefaultSendBean();

        SendQueryAppBean QueryAppBean = new SendQueryAppBean();
        QueryAppBean.setNotification("REQUEST");
        QueryAppBean.setDeviceSystem("android");//操作系统:android;ios
        // TODO: 2018/4/27 登录账号到时要修改
        QueryAppBean.setUserCode("test");//当前登录账号

        sendMsgBean.setContent(QueryAppBean);
        sendMsgBean.setMethod(Const.METHER_QUERYAPP);
        sendMsgBean.setRequestId(Const.METHER_QUERYAPP + "");//请求编号，唯一客户端自己创建
        return JSON.toJSONString(sendMsgBean);
    }

    /**
     * 设备信息上传接口：method=”uploadDeviceInfo”
     */
    private String createUploadDeviceInfoMessage() {
        BaseSendMsgBean sendMsgBean = createDefaultSendBean();
        SendUploadDeviceInfoBean uploadDeviceInfoBean = new SendUploadDeviceInfoBean();
        DeviceInfoBean deviceInfoBean = DeviceInfoEntith();

        List<AppInstalInfoBean> appInstalInfos = new ArrayList<>();
        appInstalInfos.add(createDeviceInfo());

        uploadDeviceInfoBean.setDeviceInfo(deviceInfoBean);
        uploadDeviceInfoBean.setAppInstalInfos(appInstalInfos);
        uploadDeviceInfoBean.setNotification("REQUEST");
        uploadDeviceInfoBean.setDeviceCode("B788F07E2D9BC9B15F2C0B94DF1BDFE2");// TODO: 2018/5/3 设备号
        sendMsgBean.setContent(uploadDeviceInfoBean);
        sendMsgBean.setMethod(Const.METHER_UPLOAD_DEVICE_INFO);
        return JSON.toJSONString(sendMsgBean);

    }

    public void sendMessage(String data) {
        MessageEvent event = new MessageEvent<String>();
        event.setCode(Const.SEND_CODE);
        event.setMsg("正在向服务器发送登录消息");
        event.setData(data);
        EventBus.getDefault().post(event);

    }

    DeviceInfoBean DeviceInfoEntith() {
        DeviceInfoBean deviceInfoBean = new DeviceInfoBean();
        deviceInfoBean.setNotification("REQUEST");
        deviceInfoBean.setDeviceType(PhoneMessage.devicetype + "");//设备型号
        deviceInfoBean.setDeviceModel(PhoneMessage.deviceModel + "");//"设备制作商"
        deviceInfoBean.setDeviceSystem(PhoneMessage.deviceSysem + "");//"操作系统"
        deviceInfoBean.setDeviceSystemVersion(PhoneMessage.deviceSystemVersion + "");//系统版本
        deviceInfoBean.setMac(PhoneMessage.mac() + "");//"设备MAC地址"
        deviceInfoBean.setDeviceCode("设备序列号");
        deviceInfoBean.setImei("IMEI");
        deviceInfoBean.setEsn("ESN");
        deviceInfoBean.setCpuOccupy("");// TODO: 2018/5/2 有待测试类型 //cpu占用 String.valueOf(DeviceInfo.getCpuUsage())+

        long Occupy = (DeviceInfo.getmem_TOLAL() - DeviceInfo.getmem_UNUSED(TextActivity.this)) / DeviceInfo.getmem_TOLAL();
        deviceInfoBean.setRamOccupy(String.valueOf(Occupy) + "");//内存占用
        deviceInfoBean.setGpsState(DeviceInfo.getGPSState(TextActivity.this) + "");//GPS状态
        deviceInfoBean.setBluetoothState(SetInfo.getbluetoothEable() + "");//蓝牙状态
        deviceInfoBean.setNetworkState(DeviceInfo.getNetworkState(TextActivity.this));//网络状态
        deviceInfoBean.setElectricity("");
        DeviceInfo.getCurrentNetDBM(TextActivity.this, new DeviceInfo.SignalBack() {
            @Override
            public void onChange(int netType, int strength) {
                Singlestrength = strength;
            }
        });
        deviceInfoBean.setSignalIntensity(Singlestrength + "");//"信号强度"
        deviceInfoBean.setAccessInfo("");//接入点信息
        deviceInfoBean.setSimInfo("");//SIM卡信息
       // deviceInfoBean.setPositionInfo("");//位置信息
        deviceInfoBean.setStorageInfo("");//存储信息
        deviceInfoBean.setAppInfo("");//应用安装信息
        deviceInfoBean.setCertificateInfo("");//证书信息
        deviceInfoBean.setConfigInfo("");//配置信息
        return deviceInfoBean;
    }


    /**
     * 登录接口:method=login;
     */
    private String createLogingBean() {
        BaseSendMsgBean sendMsgBean = createDefaultSendBean();
        SendLoginBean loginBean = new SendLoginBean();
        loginBean.setDeviceCode("当前设备号");
        loginBean.setNotification("REQUEST");
        loginBean.setDeviceType(PhoneMessage.devicetype);
        loginBean.setDeviceSystem("android");//操作系统
        loginBean.setPassword(MD5Util.encrypt(password));//"登录密码，传MD5加密后的值"
        loginBean.setUserCode(account);//"登录账号"
        sendMsgBean.setContent(loginBean);
        sendMsgBean.setRequestId(Const.METHER_LOGIN_CODE + "");
        sendMsgBean.setMethod(Const.METHER_LOGIN);
        return JSON.toJSONString(sendMsgBean);
    }

    @NonNull
    private BaseSendMsgBean createDefaultSendBean() {
        BaseSendMsgBean sendMsgBean = new BaseSendMsgBean();
        sendMsgBean.setSender(createDefault("", "ANDROIDPHONE"));
        List<BaseUserBean> recipients = new ArrayList<>();
        recipients.add(createDefault("INTERFACE", ""));
        sendMsgBean.setRecipients(recipients);
        return sendMsgBean;
    }


    private BaseUserBean createDefault(String code, String client) {
        BaseUserBean userBean = new BaseUserBean();
        userBean.setClient(client);
        userBean.setClientVersion("客户端版本，发件人必须传，收件人可以不传");
        userBean.setIct("SOCKET");//可以不传
        userBean.setUserCode(code);

        return userBean;
    }

    @NonNull
    private AppInstalInfoBean createDeviceInfo() {
        AppInstalInfoBean appInstalInfoBean = new AppInstalInfoBean();
        List<AppInfo> appInfoList = MyApplication.getInstance().getResList();

        for (int i = 0; i < appInfoList.size(); i++) {
            appInstalInfoBean.setAppTypeId(appInfoList.get(i).appId + "");// TODO: 2018/5/3  安装包ID 59e83d35c16c437d942917f5a3de0abd
        }
        appInstalInfoBean.setInstallType("current");// TODO: 2018/5/3  安装类型current 已安装最新版，history已安装历史版, none 未安装
        appInstalInfoBean.setVersion("");// TODO: 2018/5/3  当前安装版本号，未安装不传
        return appInstalInfoBean;
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (EventBus.getDefault().isRegistered(this))
            EventBus.getDefault().unregister(this);
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void acceptMsg(MessageEvent event) {
        switch (event.getCode()) {
            case Const.ACCEPT_CODE:
                setText((String) event.getData());
                break;
            case Const.METHER_LOGIN_CODE:  //登录操作
                AcceptLoginBean loginBean = JSON.parseObject((String) event.getDataContent(), AcceptLoginBean.class);
                mTextShow.setText(loginBean.getMessage() + "");

                break;
            case Const.METHER_UPLOAD_DEVICE_INFO_CODE:  //设备信息上传接口
                AcceptUploadDeviceInfBean uploadDeviceInfBean = JSON.parseObject((String) event.getDataContent(), AcceptUploadDeviceInfBean.class);
                String str2 = uploadDeviceInfBean.getMessage() + "" + uploadDeviceInfBean.getNotification();
                Log.i(TAG, "==============METHER_UPLOAD_DEVICE_INFO_CODE: " + str2);
                mTextShow.setText(str2);
                // TODO: 2018/4/27  得到设备信息上传后的具体操作
                break;
            case Const.METHER_METHER_QUERYAPP_CODE://获取应用接口
                AcceptQueryAppBean acceptQueryAppBean = JSON.parseObject((String) event.getDataContent(), AcceptQueryAppBean.class);
                String str = acceptQueryAppBean.getApps().get(0).getAppUrl() + "" + acceptQueryAppBean.getMessage();
                Log.i(TAG, "==============acceptMsg: " + str);
                mTextShow.setText(acceptQueryAppBean.getMessage() + "");
                // TODO: 2018/4/27  获取应用接口 后的具体操作
                break;
            case Const.METHER_QUERYPOLICY_CODE://获取策略接口
                AcceptQueryPolicyBean queryPolicyBean = JSON.parseObject((String) event.getDataContent(), AcceptQueryPolicyBean.class);
                setText((String) event.getData());
                // TODO: 2018/4/27  获取策略接口的具体操作
                break;
            case Const.METHER_QUERYUSERINFO_CODE://获取用户信息接口
                AcceptQueryUserInfoBean acceptQueryUserInfoBean = JSON.parseObject((String) event.getDataContent(), AcceptQueryUserInfoBean.class);
                mTextShow.setText(acceptQueryUserInfoBean.getMessage() + "");
                break;
            case Const.METHER_METHER_QUERYNOTIC_CODE://获取通知接口
                AcceptQueryNoticBean acceptQueryNoticBean = JSON.parseObject((String) event.getDataContent(), AcceptQueryNoticBean.class);
                break;
            case Const.METHER_QUERYDOCUMENTLIST_CODE://获取文档列表接口
                AcceptQueryDocumentListBean acceptQueryDocumentListBean = JSON.parseObject((String) event.getDataContent(), AcceptQueryDocumentListBean.class);
                mTextShow.setText(acceptQueryDocumentListBean.getMessage() + "");


        }
        Toast.makeText(this, event.getMsg(), Toast.LENGTH_LONG).show();
    }

//    private BaseMagBean getTextBean(String data) {
//        BaseMagBean bean = JSON.parseObject(data, BaseMagBean.class);
//        bean.setContent(JSON.parseObject(bean.getContent().toString(), ContentLoginBean.class));
//        return bean;
//    }

    public void setText(String text) {
        StringBuffer stringBuffer = new StringBuffer(mTextShow.getText());
        stringBuffer.append(text + "\n\r");
        mTextShow.setText(stringBuffer.toString());
    }

    public static String getUserCode() {
        AppUser appUser = MyApplication.getInstance().getAppUser();
        if (appUser == null) {
            return "";
        } else {
            return appUser.getUserCode();
        }
    }
}
