package com.yw.platform.tools.nettyn;

import android.util.Log;

import com.yw.platform.tools.nettyn.tools.NettyListener;

import io.netty.bootstrap.Bootstrap;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;

/**
 * Netty客户端
 * Created by LiuSaibao on 11/23/2016.
 */
public class NettyClient {

	private static NettyClient nettyClient = new NettyClient();
	private EventLoopGroup group;
	private NettyListener listener;
	private Channel channel;//通道
	private int reconnectNum = Integer.MAX_VALUE;
	private long reconnectIntervalTime = 5000;

	public static NettyClient getInstance(){
		return nettyClient;
	}
	
	public synchronized NettyClient connect() {
		if (!isConnect()) {
			group = new NioEventLoopGroup();
					Bootstrap bootstrap = new Bootstrap()
								.group(group)
								.option(ChannelOption.SO_KEEPALIVE,true)
								.channel(NioSocketChannel.class)
								.handler(new NettyClientInitializer(listener));
			try {
				bootstrap.connect(Const.HOST, Const.TCP_PORT).addListener(new ChannelFutureListener() {
					@Override
					public void operationComplete(ChannelFuture channelFuture){
						Log.e("连接状态","operationComplete-"+channelFuture.isSuccess());
						if (channelFuture.isSuccess()) {
							channel = channelFuture.channel();
						} else {
							channel = null;
						}
					}
				}).sync();
			} catch (InterruptedException e) {
				e.printStackTrace();
				Log.e("00", e.toString());
				listener.onServiceStatusConnectChanged(NettyListener.STATUS_CONNECT_ERROR);
				reconnect();
			}
		}
		return this;
	}
	public void disconnect() {
		group.shutdownGracefully();
	}
	public boolean isConnect(){
		if(channel!=null&&channel.isActive()){
			return true;
		}else{
			return false;
		}
	}
	public synchronized void reconnect() {
		if(reconnectNum >0 && !isConnect()){
			reconnectNum--;
			try {
				Thread.sleep(reconnectIntervalTime);
			} catch (InterruptedException e) {}
			Log.e("00","重新连接");
			connect();
		}
	}

	/**
	 * 非闭合回路
	 * @param data
	 * @param listener
	 * @return
	 */
	public boolean sendMsgToServer(byte[] data, ChannelFutureListener listener) {
		if (isConnect()) {
			ByteBuf buf = Unpooled.copiedBuffer(data);
			channel.writeAndFlush(buf).addListener(listener);
			return true;
		}else{
			return false;
		}
	}

	public void setReconnectNum(int reconnectNum) {
		this.reconnectNum = reconnectNum;
	}

	public void setReconnectIntervalTime(long reconnectIntervalTime) {
		this.reconnectIntervalTime = reconnectIntervalTime;
	}
	
	public boolean getConnectStatus(){
		return isConnect();
	}
	public void setListener(NettyListener listener) {
		this.listener = listener;
	}
}
